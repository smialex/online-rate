{"version":3,"sources":["store/index.js","features/rates/ducks.js","features/rates/api.js","features/rates/selectors.js","features/rates/sagas.js","features/rates/components/RatesChart.js","features/rates/components/RatesTable/RatesTable.js","features/rates/containers/RatesView.js","features/rates/index.js","reducers.js","sagas.js","store/store.prod.js","app.js","index.js"],"names":["module","exports","require","ratesSlice","createSlice","name","initialState","reducers","ratesAddRate","state","action","payload","usd","eur","time","push","ratesResetRates","settingsSlice","interval","maxRows","ratesSetInterval","ratesSetMaxRows","actions","ratesReducer","combineReducers","rates","reducer","settings","fetchRatesUsdEur","randomize","min","max","Math","random","fetch","then","response","json","data","Valute","USD","EUR","Value","ratesReducerSelect","ratesIntervalSelect","ratesDataSelect","ratesDataLimitedSelect","createSelector","slice","ratesSaga","select","Date","getTime","call","put","delay","RatesChart","usdKey","eurKey","timeKey","length","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","unixTime","format","domain","type","labelFormatter","stroke","RatesTable","hasData","className","map","key","Number","toFixed","RatesView","useSelector","rows","rootReducer","rootSaga","fork","sagaMiddleware","createSagaMiddleware","configureAppStore","preloadedState","store","createStore","applyMiddleware","run","configureStore","App","ReactDOM","render","document","getElementById"],"mappings":"qGACEA,EAAOC,QAAUC,EAAQ,M,0FCErBC,EAAaC,YAAY,CAC7BC,KAAM,iBACNC,aAAc,GACdC,SAAU,CACRC,aADQ,SACKC,EAAOC,GAAS,IAAD,EACCA,EAAOC,QAA1BC,EADkB,EAClBA,IAAKC,EADa,EACbA,IAAKC,EADQ,EACRA,KAClBL,EAAMM,KAAK,CACTH,MACAC,MACAC,UAGJE,gBAAiB,iBAAM,OAKrBC,EAAgBb,YAAY,CAChCC,KAAM,iBACNC,aAAc,CACZY,SAAU,EACVC,QAAS,IAEXZ,SAAU,CACRa,iBAAkB,SAACX,EAAOS,GAAR,OAAqBT,EAAMS,SAAWA,GACxDG,gBAAiB,SAACZ,EAAOU,GAAR,OAAoBV,EAAMU,QAAUA,M,EAIRhB,EAAWmB,QAA7Cd,E,EAAAA,a,KAAcQ,gBACwBC,EAAcK,SACtDC,G,EADEH,iB,EAAkBC,gBACLG,0BAAgB,CAC1CC,MAAOtB,EAAWuB,QAClBC,SAAUV,EAAcS,W,iCC5BpBE,EAAmB,WACvB,IAAMC,EAAY,SAACC,EAAKC,GAAN,OAAcC,KAAKC,UAAYF,EAAMD,GAAOA,GAC9D,OATOI,MAAM,6CACVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,UAClBJ,MAAK,gBAAGK,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,MAAkB,CAACD,EAAIE,MAAOD,EAAIC,UAOvCP,MAAK,mCAAEvB,EAAF,KAAOC,EAAP,WAAgB,CAACD,EAAMiB,GAAW,EAAG,GAAIhB,EAAMgB,GAAW,EAAG,Q,QCTjEc,EAAqB,SAAClC,GAAD,OAAWA,EAAMc,cAE/BqB,EAAsB,SAACnC,GAAD,OAAWkC,EAAmBlC,GAAOkB,SAAST,UAEpE2B,EAAkB,SAACpC,GAAD,OAAWkC,EAAmBlC,GAAOgB,OAEvDqB,EAAyBC,aAHJ,SAACtC,GAAD,OAAWkC,EAAmBlC,GAAOkB,SAASR,UAK9E0B,GACA,SAAC1B,EAASM,GAAV,OAAoBA,EAAMuB,OAAO7B,M,WCNlB8B,GAAV,SAAUA,IAAV,mFAGa,OAHb,kBAGmBC,cAHnB,OAOkB,OAJbzC,EAHL,OAIKS,EAAW0B,EAAoBnC,GAC/BK,GAAO,IAAIqC,MAAOC,UALvB,SAOwBC,YAAKzB,GAP7B,OAQD,OARC,4BAOMhB,EAPN,KAOWC,EAPX,eAQKyC,YAAI9C,EAAa,CACrBI,MACAC,MACAC,UAXD,QAaD,OAbC,UAaKyC,YAAiB,IAAXrC,GAbX,uI,4CCAMsC,EAAa,SAAC,GAAuC,IAArClB,EAAoC,EAApCA,KAAMmB,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAEjD,OAAKrB,GAAwB,IAAhBA,EAAKsB,OAIhB,kBAAC,IAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKxB,KAAMA,EACxCyB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC/C,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAASV,EACdW,cAAe,SAAAC,GAAQ,OAAIC,YAAOD,EAAU,aAC5CE,OAAQ,CAAC,UAAW,WACpBC,KAAK,WACP,kBAAC,IAAD,MAGA,kBAAC,IAAD,CAASC,eAAgB,SAAAJ,GAAQ,OAAIC,YAAOD,EAAU,eACtD,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMG,KAAK,WAAWL,QAASZ,EAAQmB,OAAO,YAC9C,kBAAC,IAAD,CAAMF,KAAK,WAAWL,QAASX,EAAQkB,OAAO,aAhBzC,MCHEC,G,OAAa,SAAC,GAAc,IAAZvC,EAAW,EAAXA,KAErBwC,EAAUxC,GAAQA,EAAKsB,OAAS,EAEtC,OACE,2BAAOmB,UAAU,eACf,+BACE,4BACE,8DACA,mCACA,qCAGJ,+BACGD,GAAWxC,EAAK0C,KAAI,gBAAGlE,EAAH,EAAGA,KAAMF,EAAT,EAASA,IAAKC,EAAd,EAAcA,IAAd,OACnB,wBAAIoE,IAAKnE,GACP,4BAAK0D,YAAO1D,EAAM,aAClB,4BAAKoE,OAAOtE,GAAKuE,QAAQ,IACzB,4BAAKD,OAAOrE,GAAKsE,QAAQ,YCjBxBC,EAAY,WACvB,IAAM9C,EAAO+C,YAAYxC,GACnByC,EAAOD,YAAYvC,GAEzB,OACE,oCACE,kBAAC,EAAD,CAAYR,KAAMA,EAAMmB,OAAO,MAAMC,OAAO,MAAMC,QAAQ,SAC1D,kBAAC,EAAD,CAAYrB,KAAMgD,MCbxB,uG,2FCOeC,EAJK/D,0BAAgB,CAClCD,mB,oCCDeiE,GAAV,SAAUA,IAAV,iEACL,OADK,SACCC,YAAKxC,KADN,uCCEP,IAAMyC,EAAiBC,cAcRC,UAZW,SAAAC,GACxB,IAAMC,EAAQC,sBACZR,EACAM,EACAG,0BAAgBN,IAKlB,OAFAA,EAAeO,IAAIT,GAEZM,I,+GCXHA,EAAQI,MAYCC,MAVf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,6BACE,kBAAC,IAAD,SCPRM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.03207fe7.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('./store.prod')\r\n} else {\r\n  module.exports = require('./store.dev')\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst ratesSlice = createSlice({\r\n  name: 'features/rates',\r\n  initialState: [],\r\n  reducers: {\r\n    ratesAddRate(state, action) {\r\n      const { usd, eur, time } = action.payload;\r\n      state.push({\r\n        usd,\r\n        eur,\r\n        time\r\n      });\r\n    },\r\n    ratesResetRates: () => []\r\n  }\r\n});\r\n\r\n\r\nconst settingsSlice = createSlice({\r\n  name: 'features/rates',\r\n  initialState: {\r\n    interval: 2,\r\n    maxRows: 10,\r\n  },\r\n  reducers: {\r\n    ratesSetInterval: (state, interval) => state.interval = interval,\r\n    ratesSetMaxRows: (state, maxRows) => state.maxRows = maxRows,\r\n  }\r\n});\r\n\r\nexport const { ratesAddRate, ratesResetRates } = ratesSlice.actions;\r\nexport const { ratesSetInterval, ratesSetMaxRows } = settingsSlice.actions;\r\nexport const ratesReducer = combineReducers({\r\n  rates: ratesSlice.reducer,\r\n  settings: settingsSlice.reducer\r\n});\r\n","const fetchRates = () => {\r\n  return fetch(`http://www.cbr-xml-daily.ru/daily_json.js`)\r\n    .then((response) => response.json())\r\n    .then(data => data.Valute)\r\n    .then(({ USD, EUR }) => [USD.Value, EUR.Value]);\r\n}\r\n\r\n// добавил рандомчика\r\nconst fetchRatesUsdEur = () => {\r\n  const randomize = (min, max) => Math.random() * (max - min) + min;\r\n  return fetchRates()\r\n    .then(([usd, eur]) => [usd + randomize(-2, 2), eur + randomize(-2, 2)]);\r\n};\r\n\r\nexport {\r\n  fetchRatesUsdEur,\r\n}","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst ratesReducerSelect = (state) => state.ratesReducer;\r\n\r\nexport const ratesIntervalSelect = (state) => ratesReducerSelect(state).settings.interval;\r\nexport const ratesMaxRowsSelect = (state) => ratesReducerSelect(state).settings.maxRows;\r\nexport const ratesDataSelect = (state) => ratesReducerSelect(state).rates;\r\n\r\nexport const ratesDataLimitedSelect = createSelector(\r\n  ratesMaxRowsSelect,\r\n  ratesDataSelect,\r\n  (maxRows, rates) => rates.slice(-maxRows)\r\n);","import { call, put, delay, select } from 'redux-saga/effects';\r\nimport { fetchRatesUsdEur } from './api';\r\nimport { ratesAddRate } from './ducks';\r\nimport { ratesIntervalSelect } from './selectors';\r\n\r\nexport function* ratesSaga() {\r\n  while (true) {\r\n    try {\r\n      const state = yield select();\r\n      const interval = ratesIntervalSelect(state);\r\n      const time = new Date().getTime();\r\n\r\n      const [usd, eur] = yield call(fetchRatesUsdEur);\r\n      yield put(ratesAddRate({\r\n        usd,\r\n        eur,\r\n        time\r\n      }));\r\n      yield delay(interval * 1000);\r\n    }\r\n    catch (error) {\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport format from 'date-fns/format';\r\nimport { LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line } from 'recharts'\r\n\r\nexport const RatesChart = ({ data, usdKey, eurKey, timeKey }) => {\r\n\r\n  if (!data || data.length === 0)\r\n    return null;\r\n\r\n  return (\r\n    <LineChart width={730} height={300} data={data}\r\n      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey={timeKey}\r\n        tickFormatter={unixTime => format(unixTime, 'HH:mm:ss')}\r\n        domain={['dataMin', 'dataMax']}\r\n        type='number' />\r\n      <YAxis\r\n\r\n      />\r\n      <Tooltip labelFormatter={unixTime => format(unixTime, 'HH:mm:ss')} />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey={usdKey} stroke=\"#8884d8\" />\r\n      <Line type=\"monotone\" dataKey={eurKey} stroke=\"#82ca9d\" />\r\n    </LineChart>\r\n  );\r\n}\r\n\r\nRatesChart.propTypes = {\r\n  data: PropTypes.array,\r\n  usdKey: PropTypes.string,\r\n  eurKey: PropTypes.string,\r\n  timeKey: PropTypes.string,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport format from 'date-fns/format';\r\nimport './RatesTable.scss';\r\n\r\nexport const RatesTable = ({ data }) => {\r\n\r\n  const hasData = data && data.length > 0;\r\n\r\n  return (\r\n    <table className='rates-table'>\r\n      <thead>\r\n        <tr>\r\n          <th>Время</th>\r\n          <th>USD</th>\r\n          <th>EUR</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {hasData && data.map(({ time, usd, eur }) => (\r\n          <tr key={time}>\r\n            <td>{format(time, 'HH:mm:ss')}</td>\r\n            <td>{Number(usd).toFixed(3)}</td>\r\n            <td>{Number(eur).toFixed(3)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nRatesTable.propTypes = {\r\n  data: PropTypes.array,\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { RatesChart, RatesTable } from '../components';\r\nimport { ratesDataSelect, ratesDataLimitedSelect } from '../selectors';\r\n\r\n\r\nexport const RatesView = () => {\r\n  const data = useSelector(ratesDataSelect);\r\n  const rows = useSelector(ratesDataLimitedSelect);\r\n\r\n  return (\r\n    <>\r\n      <RatesChart data={data} usdKey='usd' eurKey='eur' timeKey='time' />\r\n      <RatesTable data={rows} />\r\n    </>\r\n  )\r\n}","export {\r\n  ratesAddRate, ratesResetRates, ratesSetInterval, ratesSetMaxRows,\r\n  ratesReducer\r\n} from './ducks'\r\nexport { ratesSaga } from './sagas';\r\nexport { RatesView } from './containers';\r\n","import { combineReducers } from 'redux';\r\nimport { ratesReducer } from './features/rates';\r\n\r\nconst rootReducer = combineReducers({\r\n  ratesReducer\r\n});\r\n\r\nexport default rootReducer;","import { fork } from 'redux-saga/effects';\r\nimport { ratesSaga } from './features/rates';\r\n\r\nexport function* rootSaga() {\r\n  yield fork(ratesSaga);\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootReducer from '../reducers';\r\nimport { rootSaga } from '../sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst configureAppStore = preloadedState => {\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    applyMiddleware(sagaMiddleware)\r\n  );\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n}\r\n\r\nexport default configureAppStore;","import React from 'react';\nimport configureStore from './store';\nimport { Provider } from 'react-redux'\nimport { RatesView } from './features/rates';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <RatesView />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}